export const recipeReducer = (state, action) => {
    switch(action.type) {
        case 'ADD_RECIPE':
            return {
                ...state,
                recipe: [...state.recipe, action.payload],
                idParams: [...state.idParams, action.payload.id]
            }
        case 'REMOVE_RECIPE':
            return {
                ...state,
                recipe: state.recipe.filter(recipe => recipe.id !== action.payload),
                idParams: state.idParams.filter(idParams => idParams !== action.payload)
            }
        case 'FILTER':
            const newList = action.payload !== 'all' ? state.recipe.filter(filter => filter.dish === action.payload) : [];
            return {
                ...state,
                filteredRecipes: newList,
            };
        case 'EDIT_DETAILS':
            const newState = {
                ...state,
                recipe: state.recipe.map(recipe =>
                    recipe.id === action.payload.newId ? { 
                        ...recipe, 
                        title: action.payload.newTitle,
                        description: action.payload.newDescription,
                        ingredients: action.payload.newIngredients,
                        dish: action.payload.newDish
                    } 
                    : recipe
                )
            };
            return newState
        default:
            return state;
    }
}



=========================


import React, { Component } from 'react';
import { RecipeContext } from '../contexts/RecipeContext';
import RecipeDetails from './RecipeDetails';
import PageNotFound from './PageNotFound';

class RecipeItem extends Component {

    static contextType = RecipeContext;

    componentDidUpdate() {
        const { history } = this.props;
        setTimeout(() => {
            history.push('/recipe');
        }, 1500)
    }

    render() {
        const { list } = this.context;
        const { match } = this.props;
        const route_id = match.params.id;
        const params_id = parseInt(route_id)
        
        return (
            <div>
                { list.recipe.map((recipe) => (
                    recipe.id == route_id ?
                        <RecipeDetails key={recipe.id} recipe={recipe} routeId={route_id}/> :
                        null
                ))}
                
                {(list.idParams).includes(params_id)? null: <PageNotFound />}
            </div>
        );

    }

}

export default RecipeItem;


